!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	testFolder/test.cpp	/^	A () {$/;"	f	class:A
A	testFolder/test.cpp	/^class A$/;"	c	file:
ADDFRIEND	header/MyProtocol.h	/^		ADDFRIEND = 4,$/;"	e	enum:MyProtocol::CMD
ADDRESSER_H_XPCHAIJF	header/Addresser.h	2;"	d
Account	header/User.h	/^	typedef unsigned int Account;$/;"	t	class:User
Addresser	header/Addresser.h	/^class Addresser$/;"	c	namespace:BlueCat
B	testFolder/test.cpp	/^	B () {$/;"	f	class:B
B	testFolder/test.cpp	/^class B$/;"	c	file:
BUILD_DIR	makefile	/^BUILD_DIR := .\/build$/;"	m
BlueCat	header/Addresser.h	/^namespace BlueCat {$/;"	n
BlueCat	source/Addresser.cpp	/^namespace  BlueCat {$/;"	n	file:
CMD	header/MyProtocol.h	/^	enum CMD {$/;"	g	class:MyProtocol
CPPFLAGS	makefile	/^CPPFLAGS := -Wall -I $(HEADER_DIR)$/;"	m
CPPFLAGS	makefile	/^CPPFLAGS= -I header$/;"	m
DBUTIL_H_7OLYEVBA	header/DBUtil.h	2;"	d
DBUtil	header/DBUtil.h	/^namespace DBUtil {$/;"	n
Dao	header/DBUtil.h	/^		Dao (const char* hostname, const char* userName, const char* password) {$/;"	f	class:DBUtil::Dao
Dao	header/DBUtil.h	/^	class Dao$/;"	c	namespace:DBUtil
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
EPOLL_MAX	testFolder/testSockUtil.cpp	/^const int EPOLL_MAX = 100;$/;"	v
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
HEADER_DIR	makefile	/^HEADER_DIR := .\/header$/;"	m
HEAPPACKAGE	header/MyProtocol.h	/^		HEAPPACKAGE = 5$/;"	e	enum:MyProtocol::CMD
INVALID	header/MyProtocol.h	/^		INVALID = 0,$/;"	e	enum:MyProtocol::CMD
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
LOGIN	header/MyProtocol.h	/^		LOGIN = 1,$/;"	e	enum:MyProtocol::CMD
LOGOUT	header/MyProtocol.h	/^		LOGOUT = 2,$/;"	e	enum:MyProtocol::CMD
LOG_H_IR6HWENY	header/Log.h	2;"	d
Logger	header/Log.h	/^	class Logger$/;"	c	namespace:Util
MAX_EVENT	testFolder/testProtocal.cpp	/^const int MAX_EVENT = 10;$/;"	v
MUTEXLOCK_H_HXOKDXQ3	header/MutexLock.h	2;"	d
MYPROTOCOL_H_Y3UXGD6R	header/MyProtocol.h	2;"	d
MYSQLACCOUNT	header/DBUtil.h	12;"	d
MYSQLPASSWORD	header/DBUtil.h	13;"	d
MYSQLSERVERURL	header/DBUtil.h	11;"	d
MutexLock	header/MutexLock.h	/^		MutexLock () {$/;"	f	class:Util::MutexLock
MutexLock	header/MutexLock.h	/^	class MutexLock : public boost::noncopyable$/;"	c	namespace:Util
MutexLockGuard	header/MutexLock.h	/^		explicit MutexLockGuard (MutexLock &_mutex) : _mutex(_mutex) {$/;"	f	class:Util::final
MutexLockGuard	header/MutexLock.h	62;"	d
MyProtocol	header/MyProtocol.h	/^	MyProtocol () : _cmd(INVALID), _id(0), _objId(0) {$/;"	f	class:MyProtocol
MyProtocol	header/MyProtocol.h	/^class MyProtocol$/;"	c
MyProtocol	source/MyProtocol.cpp	/^MyProtocol::MyProtocol(const char *p) {$/;"	f	class:MyProtocol
NetAddresser	header/Addresser.h	/^class NetAddresser : public Addresser$/;"	c	namespace:BlueCat
OBJ	makefile	/^OBJ=DBUtil.o User.o$/;"	m
OBJ_DIR	makefile	/^OBJ_DIR := $(BUILD_DIR)\/obj$/;"	m
Obtain	source/DBUtil.cpp	/^User* DBUtil::UserDao::Obtain(User::Account id) {$/;"	f	class:DBUtil::UserDao
SENDMSG	header/MyProtocol.h	/^		SENDMSG = 3,$/;"	e	enum:MyProtocol::CMD
SERVER_PORT	source/main.cpp	10;"	d	file:
SOCKUTIL_H_YLIRQ09U	header/sockUtil.h	2;"	d
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
SRC_DIR	makefile	/^SRC_DIR := .\/source$/;"	m
Todo	workspace.vim	/^command! Todo Ack! 'TODO|FIXME|CHANGED|BUG|HACK'$/;"	c
USER_H_9YZLOATV	header/User.h	2;"	d
UTIL_H_H8GDXEEW	header/Util.h	2;"	d
UnixAddresser	header/Addresser.h	/^class UnixAddresser : public Addresser$/;"	c	namespace:BlueCat
User	header/User.h	/^	User (Account id = 0) : id(id), friends_ptr(nullptr) {$/;"	f	class:User
User	header/User.h	/^class User$/;"	c
UserDao	header/DBUtil.h	/^		UserDao (): Dao(MYSQLSERVERURL, MYSQLACCOUNT, MYSQLPASSWORD) {$/;"	f	class:DBUtil::UserDao
UserDao	header/DBUtil.h	/^	class UserDao : public Dao$/;"	c	namespace:DBUtil
Util	header/Log.h	/^namespace Util {$/;"	n
Util	header/MutexLock.h	/^namespace Util {$/;"	n
Util	header/Util.h	/^namespace Util {$/;"	n
VPATH	makefile	/^VPATH=source:header$/;"	m
_bodyLength	header/MyProtocol.h	/^	static size_t _bodyLength;$/;"	m	class:MyProtocol
_bodyLength	source/MyProtocol.cpp	/^ size_t MyProtocol::_bodyLength = 999;$/;"	m	class:MyProtocol	file:
_cmd	header/MyProtocol.h	/^	CMD _cmd;$/;"	m	class:MyProtocol
_headLength	header/MyProtocol.h	/^	static size_t _headLength;$/;"	m	class:MyProtocol
_headLength	source/MyProtocol.cpp	/^ size_t MyProtocol::_headLength = 1 + 10 + 10 + 3;$/;"	m	class:MyProtocol	file:
_id	header/MyProtocol.h	/^	User::Account _id;$/;"	m	class:MyProtocol
_length	header/MyProtocol.h	/^	unsigned int _length;$/;"	m	class:MyProtocol
_mutex	header/MutexLock.h	/^		MutexLock& _mutex;$/;"	m	class:Util::final
_mutex	header/MutexLock.h	/^		pthread_mutex_t _mutex;$/;"	m	class:Util::MutexLock
_mutex	header/User.h	/^	pthread_mutex_t _mutex;$/;"	m	class:User
_objId	header/MyProtocol.h	/^	User::Account _objId;$/;"	m	class:MyProtocol
a	testFolder/test.cpp	/^	int a;$/;"	m	class:B	file:
addr	header/Addresser.h	/^	sockaddr_in addr;$/;"	m	class:BlueCat::NetAddresser
addr	header/Addresser.h	/^	sockaddr_un addr;$/;"	m	class:BlueCat::UnixAddresser
buf	header/MyProtocol.h	/^	char buf[1024];$/;"	m	class:MyProtocol
charToInt	source/MyProtocol.cpp	/^bool MyProtocol::charToInt(unsigned int &num, const char* s, size_t len) {$/;"	f	class:MyProtocol
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
conn	header/DBUtil.h	/^		sql::Connection *conn;$/;"	m	class:DBUtil::Dao
connectToAddr	source/sockUtil.cpp	/^int sockUtil::connectToAddr(const sockaddr_in* addr) {$/;"	f	class:sockUtil
connectToAddr	source/sockUtil.cpp	/^int sockUtil::connectToAddr(const sockaddr_un* addr) {$/;"	f	class:sockUtil
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
driver	header/DBUtil.h	/^		sql::Driver *driver;$/;"	m	class:DBUtil::Dao
final	header/MutexLock.h	/^	class MutexLockGuard final : public boost::noncopyable$/;"	c	namespace:Util
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
friends	header/User.h	/^	std::string friends;$/;"	m	class:User
friends_ptr	header/User.h	/^	std::shared_ptr<std::vector<Account> > friends_ptr;$/;"	m	class:User
fun	testFolder/test.cpp	/^A fun() {$/;"	f
getAccount	header/MyProtocol.h	/^	User::Account getAccount () { return _id; }$/;"	f	class:MyProtocol
getCmd	header/MyProtocol.h	/^	CMD getCmd() { return _cmd; }$/;"	f	class:MyProtocol
getFriends	header/User.h	/^	std::shared_ptr<std::vector<Account> > getFriends() {$/;"	f	class:User
getId	header/User.h	/^	Account getId() { return id; }$/;"	f	class:User
getMsg	source/MyProtocol.cpp	/^char* MyProtocol::getMsg() { $/;"	f	class:MyProtocol
getName	header/User.h	/^	std::string getName() { return name; }$/;"	f	class:User
getObjAccount	header/MyProtocol.h	/^	User::Account getObjAccount () { return _objId; }$/;"	f	class:MyProtocol
getPassword	header/User.h	/^	std::string getPassword() { return password;}$/;"	f	class:User
getSqlFriends	header/User.h	/^	std::string getSqlFriends() { return friends;}$/;"	f	class:User
id	header/User.h	/^	Account id;$/;"	m	class:User
insert	source/DBUtil.cpp	/^bool  DBUtil::UserDao::insert(User *user) {$/;"	f	class:DBUtil::UserDao
listenToAddr	source/sockUtil.cpp	/^int sockUtil::listenToAddr(const sockaddr_in* addr, const int num) {$/;"	f	class:sockUtil
listenToAddr	source/sockUtil.cpp	/^int sockUtil::listenToAddr(const sockaddr_un* addr, const int num) {$/;"	f	class:sockUtil
lock	header/MutexLock.h	/^		void lock() {$/;"	f	class:Util::MutexLock
main	header/test.cpp	/^int main()$/;"	f
main	source/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	source/test.cpp	/^int main()$/;"	f
main	testFolder/test.cpp	/^int main()$/;"	f
main	testFolder/testMyProtocol.cpp	/^int main()$/;"	f
main	testFolder/testProtocal.cpp	/^int main()$/;"	f
main	testFolder/testSockUtil.cpp	/^int main()$/;"	f
main	testFolder/testSockUtilClient.cpp	/^int main()$/;"	f
name	header/User.h	/^	std::string name;$/;"	m	class:User
operator =	testFolder/test.cpp	/^	A& operator= (A& a) {$/;"	f	class:A
override	header/Addresser.h	/^	sockaddr* getSockaddr() override;$/;"	m	class:BlueCat::NetAddresser
override	header/Addresser.h	/^	sockaddr* getSockaddr() override;$/;"	m	class:BlueCat::UnixAddresser
password	header/User.h	/^	std::string password;$/;"	m	class:User
passwordIsEqual	header/User.h	/^	bool passwordIsEqual(std::string psw) { return psw == password; }$/;"	f	class:User
send	header/MyProtocol.h	/^	ssize_t send(int socket) {$/;"	f	class:MyProtocol
setAccount	header/MyProtocol.h	/^	void setAccount(User::Account account) { _id = account; }$/;"	f	class:MyProtocol
setCmd	source/MyProtocol.cpp	/^void MyProtocol::setCmd(CMD cmd) $/;"	f	class:MyProtocol
setFriends	header/User.h	/^	void setFriends(std::string fs) { friends = fs; }$/;"	f	class:User
setId	header/User.h	/^	void setId(Account ID) { id = ID;}$/;"	f	class:User
setMsg	source/MyProtocol.cpp	/^void MyProtocol::setMsg(const char * msg) {$/;"	f	class:MyProtocol
setName	header/User.h	/^	void setName(std::string userName) { name = userName; }$/;"	f	class:User
setNetClientAddr	source/sockUtil.cpp	/^int sockUtil::setNetClientAddr(sockaddr_in* addr, const char* IP, const uint16_t port) {$/;"	f	class:sockUtil
setNetServerAddr	source/sockUtil.cpp	/^bool sockUtil::setNetServerAddr(sockaddr_in* addr, const char* IP, const uint16_t port) {$/;"	f	class:sockUtil
setNetServerAddr	source/sockUtil.cpp	/^bool sockUtil::setNetServerAddr(sockaddr_in* addr, const uint16_t port) {$/;"	f	class:sockUtil
setObjAccount	header/MyProtocol.h	/^	void setObjAccount(User::Account account) { _objId = account; }$/;"	f	class:MyProtocol
setPassword	header/User.h	/^	void setPassword(std::string psw) { password = psw; }$/;"	f	class:User
setUnixAddr	source/sockUtil.cpp	/^bool sockUtil::setUnixAddr(sockaddr_un* addr) {$/;"	f	class:sockUtil
setUnixAddr	source/sockUtil.cpp	/^bool sockUtil::setUnixAddr(sockaddr_un* addr, const char* _path) {$/;"	f	class:sockUtil
sockUtil	header/sockUtil.h	/^namespace sockUtil {$/;"	n
splitFriends	source/User.cpp	/^void User::splitFriends() {$/;"	f	class:User
unlock	header/MutexLock.h	/^		void unlock() {$/;"	f	class:Util::MutexLock
~A	testFolder/test.cpp	/^	virtual ~A () {$/;"	f	class:A
~B	testFolder/test.cpp	/^	virtual ~B () {$/;"	f	class:B
~Dao	header/DBUtil.h	/^		virtual ~Dao () {$/;"	f	class:DBUtil::Dao
~MutexLock	header/MutexLock.h	/^		virtual ~MutexLock () {$/;"	f	class:Util::MutexLock
~MutexLockGuard	header/MutexLock.h	/^		~MutexLockGuard () {$/;"	f	class:Util::final
~MyProtocol	header/MyProtocol.h	/^	virtual ~MyProtocol () {}$/;"	f	class:MyProtocol
~User	header/User.h	/^	virtual ~User () {$/;"	f	class:User
~UserDao	header/DBUtil.h	/^		virtual ~UserDao () {$/;"	f	class:DBUtil::UserDao
